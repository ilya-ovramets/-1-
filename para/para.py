"""
S = 'jdhbfjhkhkfhbvkh'

i = 0
while i < len(S): # i = 0, 1, 2 ... len(S)-1 - припустимі індекси елементів рядка S
    print(i, S[i]) # i - індекс символу рядка, S[i] - власне символ
    i = i + 1
print()
for i in range(0, len(S), 1): # range(len(S)) = 0, 1, ... len(S)-1
    print(i, S[i]) # i - індекс символу рядка, S[i] - власне символ
print()
for i in S: # до тих пір, поки i є елементом колекції S
    print(i) # i - символ рядка S
for i, elem in enumerate(S): # створюємо пари "індекс - відповідний елемент"
    print(i, elem) # print(i, S[i])
'''
Необхідно дзеркально відобразити рядок S
S = 'DonNU' -> _S = 'UNnoD'
'''
"""
S = 'DonNU'
print(S, S[::-1]) # S[::-1] - дзеркальне відображення впорядкованої колекції S
'''
1. Необхідно визначити кількість символів в рядку S / len(S)
2. Створити новий рядок _S на базі рядка S, в якому 
останній символ рядка S стає нульовим символом рядка _S
передостанній символ рядка S стає 1 символом рядка _S і т.д.,
тобто для S = 'DonNU' матимемо:
_S[0] = 'U', _S[1] = 'N', _S[2] = 'n', _S[3] = 'o', _S[4] = 'D'
 S[4] = 'U',  S[3] = 'N',  S[2] = 'n',  S[1] = 'o',  S[0] = 'D'
Зважаючи, що len(S) = 5
_S[0] = 'U',        _S[1] = 'N',        _S[2] = 'n',        _S[3] = 'o',        _S[4] = 'D'
 S[len(S)-1] = 'U',  S[len(S)-2] = 'N',  S[len(S)-3] = 'n',  S[len(S)-4] = 'o',  S[len(S)-5] = 'D'
_S[i] == S[len(S)- 1 - i]
i = 0   _S[0] == S[4 - 0]
i = 1   _S[1] == S[4 - 1]
i = 2   _S[2] == S[4 - 2]
3. Рядок є структура незмінюванна, тому щоб побудувати рядок _S вказаним способом,
ми маємо спочатку задати порожній рядок _S = "", а потім додавати до нього елементи з рядку
S за правилом, описаним в пункті 2.
'''
_S = ''
i = 0
while i < len(S):
    _S = _S + S[len(S)-1 - i]
    i = i + 1
print(_S)
print()
_S = ''
for i in range(len(S)):
    _S = _S + S[len(S)-1 - i]
    i = i + 1
print(_S)
'''
З’ясувати, чи є рядок S - симетричним, тобто S[0] = S[len(S)]-1], S[1] = S[len(S)-2] ...
S = 'DonNUUNnoD
'''
p = "123456"
print(p[::-1])
S = 'DonNUUNnoD'
if S == S[::-1]:
    print("Рядок S є симетричним")
else:
    print("Рядок S не є симетричним")
print()


_S = ''
i = 0
while i < len(S):
    _S = _S + S[len(S)-1 - i]
    i = i + 1
print(_S)
if S == _S:
    print("Рядок S є симетричним")
else:
    print("Рядок S не є симетричним")
print()	


i = 0
isSymmetricStr = True
while i < len(S):
    if S[i] != S[len(S)-1-i]:
        isSymmetricStr = False
        break
    i = i + 1
if isSymmetricStr == True:
    print("Рядок S є симетричним")
else:
    print("Рядок S не є симетричним")

'''
Визначити, чи наявний в рядку S симетричний підрядок, що складається більш ніж з одного символу.
Наприклад, в S = 'ggkjkABCBAjhkjsgc' симетричний підрядок 'ABCBA'
'''		
S = 'ggkjkABCBAjhkjsgc'
i = 0
while i < len(S):
    j = len(S)
    while j > i:
        _S = S[i:j]
        if (len(_S) > 1) and (_S == _S[::-1]):
            print("Симетричний підрядок", _S)
        j = j - 1
    i = i + 1
